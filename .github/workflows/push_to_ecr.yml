name: Push to ECR on Merge

on:
  push:
    branches:
      - dev
      - qa
      - prod
    paths-ignore:
      - '**.md'

env:
  REGION: us-east-1
  REPO_NAME: jobDashboard

jobs:
  test-and-push:
    name: Test & Push to ECR
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: ‚úÖ Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Needed for diffing with previous commit

      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION }}

      - name: üîë Login to ECR
        run: |
          aws ecr get-login-password --region $REGION | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: ‚öôÔ∏è Create .env file
        run: |
          cat <<EOF > .env
          SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
          EOF

      - name: üïµÔ∏è Detect Changed Services
        id: changes
        shell: bash
        run: |
          git diff --name-only HEAD^ HEAD > changed.txt

          CHANGED_BACKEND=$(grep '^backend/' changed.txt || true)
          CHANGED_FRONTEND=$(grep '^frontend/' changed.txt || true)
          CHANGED_NOTIFIER=$(grep '^notifier/' changed.txt || true)

          # Export as environment variables for later steps
          echo "CHANGED_BACKEND=${CHANGED_BACKEND}" >> "$GITHUB_ENV"
          echo "CHANGED_FRONTEND=${CHANGED_FRONTEND}" >> "$GITHUB_ENV"
          echo "CHANGED_NOTIFIER=${CHANGED_NOTIFIER}" >> "$GITHUB_ENV"

      - name: üê≥ Start Docker Compose
        run: |
          docker compose --env-file .env up -d
          sleep 30

      - name: üîç Call lh
        run: |
          for i in {1..10}; do
            echo "Attempt $i: checking backend..."
            if docker exec job_backend curl -s http://localhost:8000 -o /tmp/result.json; then
              echo "‚úÖ Backend responded."
              docker exec job_backend cat /tmp/result.json
              exit 0
            else
              echo "‚ùå Backend not ready, retrying in 3s..."
              sleep 3
            fi
          done
          echo "‚ùå Backend never responded after retries."
          exit 1


      - name: üöÄ Build & Push Backend Image
        if: env.CHANGED_BACKEND != ''
        run: |
          docker build \
            --build-arg DB_USER=${{ secrets.DB_USER }} \
            --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --build-arg DB_HOST=${{ secrets.DB_HOST }} \
            --build-arg DB_PORT=${{ secrets.DB_PORT }} \
            --build-arg DB_NAME=${{ secrets.DB_NAME }} \
            -t ${{ secrets.ECR_REGISTRY }}/${{ github.ref_name }}/job-backend:latest backend
          docker push ${{ secrets.ECR_REGISTRY }}/${{ github.ref_name }}/job-backend:latest

      - name: üöÄ Build & Push Frontend Image
        if: env.CHANGED_FRONTEND != ''
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/${{ github.ref_name }}/job-frontend:latest frontend
          docker push ${{ secrets.ECR_REGISTRY }}/${{ github.ref_name }}/job-frontend:latest

      - name: üöÄ Build & Push Notifier Image
        if: env.CHANGED_NOTIFIER != ''
        run: |
          docker build \
            --build-arg SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }} \
            -t ${{ secrets.ECR_REGISTRY }}/${{ github.ref_name }}/job-notifier:latest notifier
          docker push ${{ secrets.ECR_REGISTRY }}/${{ github.ref_name }}/job-notifier:latest
